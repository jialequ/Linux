#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
 
#define ROW 3
#define COL 3
 
char qipan[ROW][COL];
 
void init(char qipan[ROW][COL])    //初始化函数
{
	//初始化成空格;
	for (int row = 0; row < ROW; ++row)
	{
		for (int col = 0; col < COL; ++col)
		{
			qipan[row][col] = ' ';
		}
	}
}
void Print(char qipan[ROW][COL])    //打印函数
{
	//打印出边框;
	printf(" --- --- ---\n");
	for (int row = 0; row < ROW; ++row)
	{
		printf("| %c | %c | %c |\n", qipan[row][0], qipan[row][1], qipan[row][2]);
		printf(" --- --- ---\n");
	}
}
void playermove(char qipan[ROW][COL])    //玩家下棋函数
{
	//玩家下,输入一组坐标;判断坐标是否越界,判断是否已经下过(是否等于空格)
	//输入符合   该格' ' = 'x';
	while (1)
	{
		int row = 0;
		int col = 0;
		printf("请玩家输入坐标[row][col]:");
		scanf("%d %d", &row, &col);
		if (row < 0 || row >(ROW - 1) || col < 0 || col >(COL - 1))
		{
			printf("输入错误,请重新输入:\n");
			continue;
		}
		if (qipan[row][col] != ' ')
		{
			printf("此位置已经下过,请重新输入坐标:\n");
			continue;
		}
		else
		{
			qipan[row][col] = 'x';
			break;
		}
	}
}
void computermove(char qipan[ROW][COL])    //电脑下棋函数
{ 
	//判断是否已经下过;
	//输入符合  该格' ' = 'o';
	while (1)
	{
		int row = rand() % ROW;
		int col = rand() % COL;
		if (qipan[row][col] != ' ')
		{
			continue;
		}
		else
		{
			qipan[row][col] = 'o';
			break;
		}
	}
}
int isfull(char qipan[ROW][COL])    //判断格子是否下满了;
{
	//如果有一个格是' ',就没满,return0;
	//如果全部满了 return1;
	for (int row = 0; row < ROW; ++row)
	{
		for (int col = 0; col < COL; ++col)
		{
			if (qipan[row][col] == ' ')
			{
				return 0;
			}
		}
	}
	return 1;
}
int checkwinner(char qipan[ROW][COL])     //检查函数
{
	//检查(遍历);
	//三个棋连在一起的所有情况(行和列和对角线);
	//检查和棋,所有格都不是' ';
	char t = 'p';
	for (int row = 0; row < ROW; ++row)
	{
		if ((qipan[row][0] == qipan[row][1]
			&& qipan[row][0] == qipan[row][2]
			&& qipan[row][0] == 'x')
			|| (qipan[row][0] == qipan[row][1]
			&& qipan[row][0] == qipan[row][2]
			&& qipan[row][0] == 'o'))
		{
			return qipan[row][0];
		}
	}
	for (int col = 0; col < COL; ++col)
	{
		if ((qipan[0][col] == qipan[1][col]
			&& qipan[0][col] == qipan[2][col]
			&& qipan[0][col] == 'x')
			|| (qipan[0][col] == qipan[1][col]
			&& qipan[0][col] == qipan[2][col]
			&& qipan[0][col] == 'o'))
		{
			return qipan[0][col];
		}
	}
	if (isfull(qipan) == 1)
	{
		return t;
	}
	return ' ';
}
int menu()    //菜单
{
	printf("**********************************\n");
	printf("*************1,开始游戏***********\n");
	printf("*************0.退出游戏***********\n");
	printf("**********************************\n");
	int choice = 0;
	printf("请输入您的选择:\n");
	scanf("%d", &choice);
	return choice;
}
void game()    //游戏入口
{
	//1.初始化棋盘;
	init(qipan);
	char winner = ' ';
	while (1)
	{
		//2.打印棋盘(第一次是一个空棋盘);
		Print(qipan);
		//3.玩家下,检测是否结束;
		playermove(qipan);
		winner = checkwinner(qipan);
		if (winner != ' ')
		{
			break;
		}
		//4.电脑落子,检测游戏是否结束;
		computermove(qipan);
		winner = checkwinner(qipan);
		if (winner != ' ')
		{
			break;
		}
	}
	
	//在游戏结束之前再打印一下地图;
	if (winner == 'x')
	{
		printf("玩家胜利!\n");
	}
	else if (winner == 'o')
	{
		printf("电脑胜利!\n");
	}
	else if (winner == 'p')
	{
		printf("平局\n");
	}
	else
	{
		printf("程序错误\n");
	}
	Print(qipan);
	//循环执行第二步;
}
int main()    //主函数
{
	//随机种子的设置,一次就行了;
	srand((unsigned int)time(0));
	while (1)
	{
		int choice = menu();
		if (choice == 1)
		{
			game();
		}
		else if (choice == 0)
		{
			printf("byebye^_^\n");
			break;
		}
		else
		{
			printf("您的输入有误,请重新输入:");
			continue;
		}
	}
	
	system("pause");
        return 0;
}
