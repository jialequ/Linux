#pragma once
#include <stdio.h>
#include <stdlib.h>

typedef struct ListNode
{
	int val;
	struct ListNode*next;
} ListNode;

//1.删除链表中等于给定值 val 的所有节点。
struct ListNode* removeElements(struct ListNode* head, int val) {
	//定义两个指针,出现指定节点则连接,没有出现则往下走
	if (head == NULL)
	{
		return  NULL;
	}
	struct ListNode* cur = head;
	struct ListNode* ret = NULL;
	while (cur != NULL)
	{
		if (cur->val == val  && ret == NULL)
		{
			//头结点
			head = head->next;
			cur = head;
		}
		else if (cur->val == val && ret != NULL)
		{
			//非头结点的值等于val
			ret->next = cur->next;
			cur = cur->next;
		}
		else
		{
			//不是头结点而且值不相等,往下走
			ret = cur;
			cur = cur->next;
		}
	}
	return head;
}

//2.翻转一个单链表
struct ListNode* reverseList(struct ListNode* head) {
	struct ListNode *cur = head;
	struct ListNode *nhead = NULL;
	while (cur != NULL)
	{
		struct ListNode *next = cur->next;
		cur->next = nhead;
		nhead = cur;
		cur = next;
	}
	return nhead;
}

//5.合并两个链表
//将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的
struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {
	//1.判断 l1 和 l2 有没有为空的,如果有的话,直接返回另一个链表
	if (l1 == NULL)
	{
		return l2;
	}
	if (l2 == NULL)
	{
		return l1;
	}
	//2.两个链表都不为空,从第一个开始比较
	struct ListNode* c1 = l1;
	struct ListNode* c2 = l2;
	struct ListNode* result = NULL;
	struct ListNode* last = NULL;   //标记最后一个节点,不用在后面寻找,减少时间复杂度
	while (c1 != NULL && c2 != NULL)
	{
		if (c1->val <= c2->val)
		{
			//如果c1->val <= c2->val,把c1尾插(直接将node节点的next置空)到result链表中
			//插入之前,先判断result中是否为空
			struct ListNode* next = c1->next;//标记next,防止混乱
			c1->next = NULL;
			if (result == NULL)
			{
				//链表中一个节点都没有
				result = c1;
				last = c1;
			}
			else
			{
				last->next = c1;
				last = c1;
			}
			c1 = next;
		}
		else
		{
			//同上
			struct ListNode* next = c2->next;
			c2->next = NULL;
			if (result == NULL)
			{
				//链表中一个节点都没有
				result = c2;
				last = c2;
			}
			else
			{
				last->next = c2;
				last = c2;
			}
			c2 = next;
		}
	}
	//如果一个链表被取空了,还剩一个链表没有空,将结果链表的last指向未完链表
	//last->next = c1	||	last->next = c2;
	if (c1 != NULL)
	{
		last->next = c1;
	}
	if (c2 != NULL)
	{
		last->next = c2;
	}
	return result;//返回结果链表的头节点
}


//6.编写代码，以给定值x为基准将链表分割成两部分，所有小于x的结点排在大于或等于x的结点之前
//  给定一个链表的头指针 ListNode* pHead，请返回重新排列后的链表的头指针。注意：分割以后保持原来的数据顺序不变。
ListNode* partition(ListNode* pHead, int x) 
{
	// write code here
	ListNode* small = NULL;//小部分的头结点
	ListNode* small_last = NULL;
	ListNode* big = NULL;//大的部分的头结点
	ListNode* big_last = NULL;
	ListNode* cur = pHead;
	while (cur != NULL)
	{
		ListNode* next = cur->next;
		cur->next = NULL;	//必须置空,防止big_last指向原来链表中的next
		if (cur->val < x)
		{
			if (small == NULL)
			{
				//小的部分还没有元素,头 = 尾 = cur
				small = small_last = cur;
			}
			else
			{
				//有元素,尾插,并且更新small_last.
				small_last->next = cur;
				small_last = cur;
			}
		}
		else
		{
			//同上
			if (big == NULL)
			{
				big = big_last = cur;
			}
			else
			{
				big_last->next = cur;
				big_last = cur;
			}
		}
		cur = next;
	}
	//连接两个分割链表
	//判断小的部分和大的部分是否有空
	///	1.如果有,返回另一个
	//  2.如果没有,连接,small_last->next = big
	if (small == NULL)
	{
		return big;
	}
	else if (big == NULL)
	{
		return small;
	}
	else
	{
		small_last->next = big;
		return small;
	}
}
